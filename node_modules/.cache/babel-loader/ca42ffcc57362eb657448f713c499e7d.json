{"ast":null,"code":"var _jsxFileName = \"/Users/daniyal/Desktop/generator/src/Wallet.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport styles from './Wallet.module.css';\nimport simple_token_abi from './Contracts/simple_token_abi.json';\nimport Interactions from './Interactions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  // deploy simple token contract and paste deployed contract address here. This value is local ganache chain\n  let contractAddress = '0x0210811B2d5A7293a00C12ee77Ae343FF845602C';\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [tokenName, setTokenName] = useState(\"Token\");\n  const [balance, setBalance] = useState(null);\n  const [transferHash, setTransferHash] = useState(null);\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  }; // update account, will cause component re-render\n\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n    updateEthers();\n  };\n\n  const updateBalance = async () => {\n    let balanceBigN = await contract.balanceOf(defaultAccount);\n    let balanceNumber = balanceBigN.toNumber();\n    let tokenDecimals = await contract.decimals();\n    let tokenBalance = balanceNumber / Math.pow(10, tokenDecimals);\n    setBalance(toFixed(tokenBalance));\n  };\n\n  function toFixed(x) {\n    if (Math.abs(x) < 1.0) {\n      var e = parseInt(x.toString().split('e-')[1]);\n\n      if (e) {\n        x *= Math.pow(10, e - 1);\n        x = '0.' + new Array(e).join('0') + x.toString().substring(2);\n      }\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10, e);\n        x += new Array(e + 1).join('0');\n      }\n    }\n\n    return x;\n  }\n\n  const chainChangedHandler = () => {\n    // reload the page to avoid any errors with chain change mid use of application\n    window.location.reload();\n  }; // listen for account changes\n\n\n  window.ethereum.on('accountsChanged', accountChangedHandler);\n  window.ethereum.on('chainChanged', chainChangedHandler);\n\n  const updateEthers = () => {\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(tempProvider);\n    let tempSigner = tempProvider.getSigner();\n    setSigner(tempSigner);\n    let tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner);\n    setContract(tempContract);\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      updateBalance();\n      updateTokenName();\n    }\n  }, [contract]);\n\n  const updateTokenName = async () => {\n    setTokenName(await contract.name());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", tokenName + \" ERC-20 Wallet\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.button6,\n      onClick: connectWalletHandler,\n      children: connButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.walletCard,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Address: \", defaultAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [tokenName, \" Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 4\n      }, this), errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Interactions, {\n      contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 2\n  }, this);\n};\n\n_s(Wallet, \"KaEarA2+EIN1fJl3C4QcPJGPzWk=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/daniyal/Desktop/generator/src/Wallet.js"],"names":["React","useState","useEffect","ethers","styles","simple_token_abi","Interactions","Wallet","contractAddress","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","connButtonText","setConnButtonText","provider","setProvider","signer","setSigner","contract","setContract","tokenName","setTokenName","balance","setBalance","transferHash","setTransferHash","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAccount","updateEthers","updateBalance","balanceBigN","balanceOf","balanceNumber","toNumber","tokenDecimals","decimals","tokenBalance","Math","pow","toFixed","x","abs","e","parseInt","toString","split","Array","join","substring","chainChangedHandler","location","reload","on","tempProvider","providers","Web3Provider","tempSigner","getSigner","tempContract","Contract","updateTokenName","name","button6","walletCard"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\nimport simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\n\nconst Wallet = () => {\n\n\t// deploy simple token contract and paste deployed contract address here. This value is local ganache chain\n\tlet contractAddress = '0x0210811B2d5A7293a00C12ee77Ae343FF845602C';\n\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n\tconst [provider, setProvider] = useState(null);\n\tconst [signer, setSigner] = useState(null);\n\tconst [contract, setContract] = useState(null);\n\n\tconst [tokenName, setTokenName] = useState(\"Token\");\n\tconst [balance, setBalance] = useState(null);\n\tconst [transferHash, setTransferHash] = useState(null);\n\n\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tupdateEthers();\n\t}\n\n\tconst updateBalance = async () => {\n\t\tlet balanceBigN = await contract.balanceOf(defaultAccount);\n\t\tlet balanceNumber = balanceBigN.toNumber();\n\n\t\tlet tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, tokenDecimals);\n\n\t\tsetBalance(toFixed(tokenBalance));\t\n\n\n\t}\n\n   function toFixed(x) {\n   if (Math.abs(x) < 1.0) {\n      var e = parseInt(x.toString().split('e-')[1]);\n      if (e) {\n         x *= Math.pow(10, e - 1);\n         x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n      }\n   } else {\n      var e = parseInt(x.toString().split('+')[1]);\n      if (e > 20) {\n         e -= 20;\n         x /= Math.pow(10, e);\n         x += (new Array(e + 1)).join('0');\n      }\n   }\n   return x;\n}\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\n\tconst updateEthers = () => {\n\t\tlet tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tsetProvider(tempProvider);\n\n\t\tlet tempSigner = tempProvider.getSigner();\n\t\tsetSigner(tempSigner);\n\n\t\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner);\n\t\tsetContract(tempContract);\t\n\t}\n\n\tuseEffect(() => {\n\t\tif (contract != null) {\n\t\t\tupdateBalance();\n\t\t\tupdateTokenName();\n\t\t}\n\t}, [contract]);\n\n\tconst updateTokenName = async () => {\n\t\tsetTokenName(await contract.name());\n\t}\n\t\n\treturn (\n\t<div>\n\t\t\t<h2> {tokenName + \" ERC-20 Wallet\"} </h2>\n\t\t\t<button className={styles.button6} onClick={connectWalletHandler}>{connButtonText}</button>\n\n\t\t\t<div className={styles.walletCard}>\n\t\t\t<div>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\n\t\t\t<div>\n\t\t\t\t<h3>{tokenName} Balance: {balance}</h3>\n\t\t\t</div>\n\n\t\t\t{errorMessage}\n\t\t</div>\n\t\t<Interactions contract = {contract}/>\n\t</div>\n\t)\n}\n\nexport default Wallet;"]},"metadata":{},"sourceType":"module"}